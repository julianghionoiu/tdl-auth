AWSTemplateFormatVersion: 2010-09-09
Description: "Cloud formation for deploying Auth"
Resources:
    AuthLambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket:
                    Ref: LambdaFunctionS3Bucket
                S3Key:
                    Ref: LambdaFunctionS3Key
            FunctionName:
                Ref: AuthLambdaFunctionName
            Handler: "tdl.auth.AuthLambdaHandler"
            MemorySize: 1536
            Role:
                Ref: AuthLambdaFunctionRole
            Runtime: "java8"
            Timeout: 30
            Environment:
                Variables:
                    REGION:
                        Ref: LambdaEnvRegion
                    BUCKET:
                        Ref: AuthLambdaEnvVideoStorageBucket
                    TDL_SCOPE:
                        Ref: AuthLambdaEnvTDLScope
                    JWT_DECRYPT_KEY_ARN:
                        Ref: AuthLambdaEnvJwtDecryptKeyArn
                    #TODO: Remove the hack below!
                    ACCESS_KEY:
                        Ref: AuthLambdaAwsAccessKey
                    SECRET_KEY:
                        Ref: AuthLambdaAwsSecretKey
    ApiGatewayRestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name:
                Ref: ApiGatewayRestApiName
            Description: Auth API
            FailOnWarnings: true
            Body:
                swagger: "2.0"
                info:
                    version: "2017-06-07T15:26:32Z"
                    title: "tdl-auth-api"
                schemes:
                    - "https"
                paths:
                    /verify:
                        post:
                            consumes:
                                - "application/x-www-form-urlencoded"
                            responses:
                                '200':
                                    description: "OK"
                                    headers:
                                        Content-Type:
                                            type: "string"
                                        Content-Disposition:
                                            type: "string"
                                '400':
                                    description: "Bad request"
                                    headers:
                                        Content-Type:
                                            type: "string"
                                '401':
                                    description: "Not authorized to perform the requested action"
                                    headers:
                                        Content-Type:
                                            type: "string"
                                '403':
                                    description: "Token not valid"
                                    headers:
                                        Content-Type:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                responses:
                                    "^\\[Input\\].*":
                                        statusCode: "400"
                                        responseParameters:
                                            method.response.header.Content-Type: "'text/plain'"
                                    "^\\[Authorization\\].*":
                                        statusCode: "401"
                                        responseParameters:
                                            method.response.header.Content-Type: "'text/plain'"
                                    "^\\[Authentication\\].*":
                                        statusCode: "403"
                                        responseParameters:
                                            method.response.header.Content-Type: "'text/plain'"
                                    default:
                                        statusCode: "200"
                                        responseParameters:
                                            method.response.header.Content-Type: "integration.response.header.Content-Type"
                                            method.response.header.Content-Disposition: "'attachment; filename=\"credentials.config\"'"
                                        contentHandling: "CONVERT_TO_BINARY"
                                requestTemplates:
                                    application/x-www-form-urlencoded: "## convert HTML POST data or HTTP GET\
                                      \ query string to JSON\n \n## get the raw post data from the AWS built-in\
                                      \ variable and give it a nicer name\n#if ($context.httpMethod == \"POST\"\
                                      )\n #set($rawAPIData = $input.path(\"$\"))\n#elseif ($context.httpMethod\
                                      \ == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData\
                                      \ = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length()\
                                      \ - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n\
                                      \ #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData\
                                      \ = \"\")\n#end\n \n## first we get the number of \"&\" in the string,\
                                      \ this tells us if there is more than one key value pair\n#set($countAmpersands\
                                      \ = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\
                                      \ \n## if there are no \"&\" at all then we have only one key value pair.\n\
                                      ## we append an ampersand to the string so that we can tokenise it the\
                                      \ same way as multiple kv pairs.\n## the \"empty\" kv pair to the right\
                                      \ of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n\
                                      \ #set($rawPostData = $rawAPIData + \"&\")\n#end\n \n## now we tokenise\
                                      \ using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"\
                                      &\"))\n \n## we set up a variable to hold the valid key value pairs\n\
                                      #set($tokenisedEquals = [])\n \n## now we set up a loop to find the valid\
                                      \ key value pairs, which must contain only one \"=\"\n#foreach( $kvPair\
                                      \ in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"\
                                      =\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised =\
                                      \ $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we\
                                      \ found a valid key value pair. add it to the list.\n   #set($devNull\
                                      \ = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n \n## next we\
                                      \ set up our loop inside the output structure \"{\" and \"}\"\n{\n#foreach(\
                                      \ $kvPair in $tokenisedEquals )\n  ## finally we output the JSON for this\
                                      \ pair and append a comma if this isn't the last pair\n  #set($kvTokenised\
                                      \ = $kvPair.split(\"=\"))\n \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised[1].length()\
                                      \ > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext\
                                      \ ),#end\n#end\n}"
                                uri:
                                    Fn::Join:
                                        - ''
                                        - - 'arn:aws:apigateway:'
                                          - Ref: AWS::Region
                                          - ":lambda:path/2015-03-31/functions/"
                                          - Fn::GetAtt:
                                              - AuthLambdaFunction
                                              - Arn
                                          - "/invocations"
                                passthroughBehavior: "when_no_templates"
                                httpMethod: "POST"
                                type: "aws"
                x-amazon-apigateway-binary-media-types:
                    - "application/octet-stream"
    ReceiveLambdaPermissionApiGateway:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName:
                Fn::GetAtt:
                    - AuthLambdaFunction
                    - Arn
            Action: lambda:InvokeFunction
            Principal: apigateway.amazonaws.com
            SourceArn:
                Fn::Join:
                    - ''
                    - - 'arn:aws:execute-api:'
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - ":"
                      - Ref: ApiGatewayRestApi
                      - "/*/*"
    ApiGatewayDeployment:
        Type: AWS::ApiGateway::Deployment
        Properties:
            RestApiId:
                Ref: ApiGatewayRestApi
            StageName: production


    LinkGeneratorLambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket:
                    Ref: LambdaFunctionS3Bucket
                S3Key:
                    Ref: LambdaFunctionS3Key
            FunctionName:
                Ref: LinkGeneratorLambdaFunctionName
            Handler: "tdl.auth.LinkGeneratorLambdaHandler"
            MemorySize: 1536
            Role:
                Ref: LinkGeneratorLambdaFunctionRole
            Runtime: "java8"
            Timeout: 46
            Environment:
                Variables:
                    PAGE_STORAGE_BUCKET:
                        Ref: LinkGeneratorLambdaEnvPageStorageBucket
                    JWT_ENCRYPT_KEY_ARN:
                        Ref: LinkGeneratorLambdaEnvJwtEncryptKeyArn
                    AUTH_REGION:
                        Ref: LambdaEnvRegion
                    AUTH_ENDPOINT_URL:
                        Ref: LinkGeneratorLambdaEnvAuthVerifyEndpointURL


Parameters:
    ### Common
    LambdaFunctionS3Bucket:
        Type: String
    LambdaFunctionS3Key:
        Type: String
    LambdaEnvRegion:
        Type: String

    ### Auth
    AuthLambdaFunctionName:
        Type: String
    AuthLambdaFunctionRole:
        Type: String
    AuthLambdaEnvVideoStorageBucket:
        Type: String
    AuthLambdaEnvTDLScope:
        Type: String
    AuthLambdaEnvJwtDecryptKeyArn:
        Type: String
    AuthLambdaAwsAccessKey:
        Type: String
    AuthLambdaAwsSecretKey:
        Type: String
    ApiGatewayRestApiName:
        Type: String

    ### Link Generator
    LinkGeneratorLambdaFunctionName:
        Type: String
    LinkGeneratorLambdaFunctionRole:
        Type: String
    LinkGeneratorLambdaEnvJwtEncryptKeyArn:
        Type: String
    LinkGeneratorLambdaEnvPageStorageBucket:
        Type: String
    LinkGeneratorLambdaEnvAuthVerifyEndpointURL:
        Type: String
#TODO: Output
